name: Build and Release

on:
  push:
    branches:
      - Main
  workflow_dispatch: # Allow manual re-runs
  
  pull_request:
    branches: 
      - '**'

env:
  REGISTRY: ghcr.io
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      # version: v${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}
      version: ${{ steps.refs.outputs.version }}
      version_type: ${{ steps.version.outputs.version_type }}
      sha_short: ${{ steps.refs.outputs.sha_short }}
      short_ref: ${{ steps.refs.outputs.short_ref }}
      new_release: ${{ steps.refs.outputs.new_release }} 
    steps:
      - name: Determine version
        uses: PaulHatch/semantic-version@v5.3.0
        id: version
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE"
          minor_pattern: "feat:"
          format: "v${major}.${minor}.${patch}"
          bump_each_commit: false
      - name: Set outputs
        id: refs
        run: |
          export BRANCH=${GITHUB_REF#refs/*/}
          echo "branch: ${BRANCH}"
          export BRANCHTRANSLATED=$(echo ${BRANCH} | tr '/' '_')
          echo "short_ref: ${BRANCHTRANSLATED}"
          export VERSION=""
          if ${{ steps.version.outputs.version_type != 'none' }}; then
            export VERSION=${{ steps.version.outputs.version }}
          else
            export VERSION=${BRANCHTRANSLATED}_$(git rev-parse --short=12 HEAD)
          fi
          echo "version: ${VERSION}"
          echo "::set-output name=short_ref::${BRANCHTRANSLATED}"
          echo "::set-output name=sha_short::SHA-$(git rev-parse --short=12 HEAD)"
          echo "::set-output name=version::${VERSION}"

  build_exe:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable
        run: |
          pyinstaller --onefile app.py --name mimosa.exe

      - uses: actions/upload-artifact@v3
        with:
          name: mimosa-exe
          path: ./dist/mimosa.exe

  docker:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.REGISTRY }}
      - name: Prepare Registry Names
        run: |
          echo IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile # Replace with the path to your Dockerfile
          platforms: linux/amd64,linux/arm64 # Adjust the platforms as needed
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}/mimosa:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}/mimosa:${{ needs.version.outputs.version }}

  release:
    runs-on: ubuntu-latest
    needs: [version, build_exe]
    if: always() && needs.version.outputs.version_type != 'none' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: mimosa-exe
          path: ./dist
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.version }}
          release_name: ${{ needs.version.outputs.version }}
          overwrite: true
          body: |
            M.I.M.O.S.A Release ${{ needs.version.outputs.version }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/mimosa.exe
          asset_name: mimosa.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
